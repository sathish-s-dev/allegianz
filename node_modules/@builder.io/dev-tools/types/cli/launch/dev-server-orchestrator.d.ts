import type { DevToolsSys } from "@builder.io/dev-tools/core";
import { type RequestHandler as ProxyRequestHandler } from "http-proxy-middleware";
import { type ChildProcessByStdio } from "node:child_process";
import type { Readable } from "node:stream";
import type { FusionConfig } from "$/ai-utils";
export type RunCommandState = "running" | "stopped" | "idle";
export interface DevServerOrchestrator {
    command: string;
    state: RunCommandState;
    proxyTarget: string;
    proxyPort: number;
    proxyMiddleware: ProxyRequestHandler | undefined;
    pid: number | undefined;
    ensureRunning: (abortSignal?: AbortSignal) => Promise<boolean>;
    setCommand: (newCommand: string, signal?: AbortSignal) => Promise<boolean>;
    setPort: (newPort: number) => Promise<boolean>;
    pingServer: (signal?: AbortSignal) => Promise<Response>;
    addCheckpoint: () => void;
    getOpenPorts: () => Promise<number[]>;
    getCheckpoints: (n: number, mode: "all" | "out" | "err") => string;
    getAllStdout: () => string;
    getAllStderr: () => string;
    getOutput: () => string;
    waitUntilIdle: (initialWaitMs?: number, idleTimeMs?: number) => Promise<void>;
    onClose: (callback: (code: number | null) => void) => void;
    onStdout: (callback: (data: string) => void) => void;
    onStderr: (callback: (data: string) => void) => void;
    restart: (abortSignal?: AbortSignal) => Promise<void>;
}
export declare function devServerOrchestrator(sys: DevToolsSys, fusionConfig: FusionConfig): Promise<DevServerOrchestrator>;
export declare const checkPortsListenedByPid: (pid: number) => number[];
export declare function killProcess(sys: DevToolsSys, proc: ChildProcessByStdio<null, Readable, Readable> | undefined, abortSignal?: AbortSignal, timeout?: number): Promise<boolean>;
